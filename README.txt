Readme for qrOTP.py

Instructions on how to run program:
NOTE:
I tested this using the iOS version of Google Authenticator.

qrOTP uses these libraries:
qrcode, pyotp, base64, hmac, struct, sys, time, and numpy

You should only have to install qrcode, pyotp, and numpy.   You can do this by typing in these commands (there is a 99.9 percent chance
that whoever is grading this knows infinitely more about Python than I do, and that this is unnecessary, but I figured I might as well include
this information):
pip install qrcode[pil]
pip install pyotp
pip install numpy

Sometimes numpy can be tricky to install.  Please refer to these links if you have issues:
https://scipy.org/install.html
https://stackoverflow.com/questions/29499815/how-to-install-numpy-on-windows-using-pip-install

If you need to install pip, please refer to this website:
https://pip.pypa.io/en/stable/installing/

Now, to run the script, you can type one of two things:
If you want to generate a QR code, type:
python qrOTP.py --generate-qr
This will generate a QR code in jpg format called 'qr.jpg' in the same directory as the script itself.
If you want to generate the otp, type:
python qrOTP.py --get-otp
This will output/print a six-digit OTP in your terminal every 30 seconds that matches up (or it should anyway) with the OTP generated by the Google Authenticator
app.
Note: I developed and tested this on a windows machine using the a bash terminal in VSCODE (I used the python 3.8.0 32 bit interpreter).  My setup only allowed me 
to type python (python2.7 or python3 aren't recognized) when trying to run my script.  

Program Implementation:
This program was a struggle for me, because I'm incredibly inexperienced with python (this essentially the first thing I've ever done in python that was even remotely
complex).  I was originally going to do the OTP generation in C, but I quickly decided this would have been excruciating to do.  I looked at some hotp/totp C programs,
and they looked nightmarish and incredibly complex.  So, I stuck with python, which was ultimately the better option; however, it was (as stated before) still frustrating,
because of my inexperience with the language, and the pickiness of the hmac.new() function.
The QR code part of the code was simple.  I used the qrcode library, which allowed me to generate a QR code with 3-4 lines of code.
The TOTP portion of the code was much trickier (since we weren't allowed to use pyotp to simply generate the OTP).  base64.b32decode() is used to decode the key; it 
returns a decoded byte string.  (time.time() / 30) is used to generate the time counter.  The program converts that to an int and then uses struct.pack() to convert that
to byte form.  hmac.new().hexdigest() takes the key and time counter and generates a mac in hexadecimal form.  qrOTP then calculates the offset and uses the offset to
extract a 4 bytes of data from the MAC.  Mod 10^6 is then applied to the 4 bytes to generate a 6-digit OTP.
